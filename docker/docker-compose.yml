services:

  app:
    image: username/dockerhubrepo:latest # pin a minor version series tag instead of latest
    container_name: django-ultimate-app
    environment:
      - DOMAIN=myservice.example.com # your FQDN or IP; used to define ALLOWED_HOSTS and CSRF_TRUSTED_ORIGINS
      - SECURE_COOKIES=False # set to True if you use a reverse proxy with tls; enables secure cookie flag and hsts
      # ------- OPTIONAL OIDC AUTH --------
      # Set to 'True' to enable OIDC authentication
      #- OIDC_ENABLED=True
      # Set to 'True' to allow the creation of new users through OIDC
      #- OIDC_CREATE_USER=True
      # The signing algorithm used by the OIDC provider (e.g., RS256, HS256)
      #- OIDC_RP_SIGN_ALGO=RS256
      # URL of the JWKS endpoint for the OIDC provider
      #- OIDC_OP_JWKS_ENDPOINT=https://authentik.example.com/application/o/vouchervault/jwks/
      # Client ID for your OIDC RP
      #- OIDC_RP_CLIENT_ID=vouchervault
      # Client secret for your OIDC RP
      #- OIDC_RP_CLIENT_SECRET=super-secure-secret-key
      # Authorization endpoint URL of the OIDC provider
      #- OIDC_OP_AUTHORIZATION_ENDPOINT=https://authentik.example.com/application/o/authorize/
      # Token endpoint URL of the OIDC provider
      #- OIDC_OP_TOKEN_ENDPOINT=https://authentik.example.com/application/o/token/
      # User info endpoint URL of the OIDC provider
      #- OIDC_OP_USER_ENDPOINT=https://authentik.example.com/application/o/userinfo/
      # Length of time it takes for an id token to expire in seconds	
      #- OIDC_RENEW_ID_TOKEN_EXPIRY_SECONDS=900
      # ------- PSQL DB ENVS --------
      #- DB_ENGINE=postgres
      #- POSTGRES_USER=psql
      #- POSTGRES_PASSWORD=psql
      #- POSTGRES_DB=psql
      #- POSTGRES_HOST=db
      #- POSTGRES_PORT=5432
    restart: unless-stopped
    expose:
      - 8000
    ports:
      - 8000:8000
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - ./volume-data/database:/opt/app/database
    #networks:
    #  - proxy
    #labels:
    #  - traefik.enable=true
    #  - traefik.docker.network=proxy
    #  - traefik.http.routers.myservice.rule=Host(`myservice.example.com`)
    #  - traefik.http.services.myservice.loadbalancer.server.port=8000
    #  # Optional part for traefik middlewares
    #  - traefik.http.routers.myservice.middlewares=local-ipwhitelist@file

  redis:
    container_name: myservice-redis
    image: redis:7.2-alpine
    restart: unless-stopped
    #networks:
    #  - proxy

#  db:
#    container_name: django-ultimate-psql
#    image: postgres:16-alpine
#    restart: unless-stopped
#    expose:
#      - 5432
#    volumes:
#      - ./volume-data/database/psql:/var/lib/postgresql/data/
#    environment:
#      - POSTGRES_USER=psql
#      - POSTGRES_PASSWORD=psql
#      - POSTGRES_DB=psql    
#    #networks:
#    #  - proxy

#networks:
#  proxy:
#    external: true      
